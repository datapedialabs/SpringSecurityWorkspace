package com.packtpub.springsecurity.service;

import java.util.Collection;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.context.SecurityContext;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.stereotype.Component;

import com.packtpub.springsecurity.core.authority.CalendarUserAuthorityUtils;
import com.packtpub.springsecurity.domain.CalendarUser;

@Component
public class CalendarUserContext implements UserContext {
	private final CalendarService calendarService;
	
	@Autowired
    private UserDetailsService userDetailsService;

	@Autowired
	public CalendarUserContext(CalendarService userService) {
		if (userService == null) {
			throw new IllegalArgumentException("userService cannot be null");
		}
		this.calendarService = userService;
	}

	@Override
	public CalendarUser getCurrentUser() {
        SecurityContext context = SecurityContextHolder.getContext();
        Authentication authentication = context.getAuthentication();
        if (authentication == null) {
          	return null;
        }
        //String email = ((UserDetails)authentication.getPrincipal()).getUsername();           
        String email = ((CalendarUser)authentication.getPrincipal()).getEmail();
        return calendarService.findUserByEmail(email);
	}

	@Override
	public void setCurrentUser(CalendarUser user) { //needed for automatic login
		  //UserDetails userDetails = userDetailsService.loadUserByUsername(user.getEmail());
		  Collection<? extends GrantedAuthority> authorities = CalendarUserAuthorityUtils.createAuthorities(user);
	      Authentication authentication = new UsernamePasswordAuthenticationToken(user, user.getPassword(), authorities);
	      SecurityContextHolder.getContext().setAuthentication(authentication);
	}
}